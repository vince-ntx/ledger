syntax = "proto3";
package log.v1;

import "gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.sizer_all) = true;

message Record {
  bytes value = 1;
  uint64 offset = 2;
  uint64 term = 3;
  uint32 type = 4;
}

service Log {
  rpc Produce(ProduceRequest) returns (ProduceResponse) {}
  rpc Consume(ConsumeRequest) returns (ConsumeResponse) {}
  // unidirectrional stream:  returns a stream to read a sequence of messages
  rpc ConsumeStream(ConsumeRequest) returns (stream ConsumeResponse) {}
  // bidirectrional stream: where the streams operate independently
  // - the server could batch requests and send back a single response
  // - the server could send back a response for each request
  rpc ProduceStream(stream ProduceRequest) returns (stream ProduceResponse) {}
  rpc GetServers(GetServersRequest) returns (GetServersResponse) {}
}

message ProduceRequest {
  Record record = 1; // record to produce for the log
}

message ProduceResponse {
  uint64 offset = 1; // sends back the record's offset, basically the identifier's offset
}

message ConsumeRequest {
  uint64 offset = 1; // offset of the record they want to consume
}

message ConsumeResponse {
  Record record = 2;
}

message GetServersRequest {}

message GetServersResponse {
  repeated Server servers = 1;
}

message Server {
  string id = 1;
  string rpc_addr = 2;
  bool is_leader = 3;
}

message Transaction {
  double value = 1;
}

message TransactionRequest {
  double value = 1;
}

message TransactionResponse {
  Transaction transaction = 1;
}

service Ledger {
  rpc CreateTransaction(TransactionRequest) returns (TransactionResponse) {}
  //  rpc ReadTransaction()
}
